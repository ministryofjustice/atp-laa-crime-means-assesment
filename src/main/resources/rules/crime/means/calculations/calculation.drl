package rules.crime.means.calculations
import com.laa.model.MeansInformation;
import com.laa.model.Applicant;
import com.laa.model.EmployedIncome;
import com.laa.model.civil.enums.EmploymentStatus;
import com.laa.model.civil.enums.PaymentFrequency;
import com.laa.model.crime.CrimeCase;
import com.laa.model.crime.CourtType;
import com.laa.model.crime.CaseType;
import com.laa.model.crime.CrimeMeansDecisionReport;
import com.laa.model.crime.CrimeDependent;
import com.laa.model.crime.Weight;

import java.math.RoundingMode;
import java.math.BigDecimal;
import com.laa.model.OtherIncome;
import com.laa.model.Partner;
import com.laa.model.civil.enums.PaymentFrequency;
import com.laa.model.civil.enums.IncomeType;
import com.laa.model.civil.enums.OutgoingType;
import java.util.Optional;
import com.laa.model.Dependent;
import com.laa.model.Outgoing;
import com.laa.model.civil.enums.RelationToApplicant;
import java.util.ArrayList;
import com.laa.model.Dependent;
import com.laa.model.enums.AccountType;

rule "set courtType"
	when
		$case : CrimeCase(  courtType != null)
		$decision : CrimeMeansDecisionReport(courtType == null)
	then
		$decision.setCourtType($case.getCourtType());
		update($decision);
end


rule "set caseType"
	when
		$case : CrimeCase(caseType != null)
		$decision : CrimeMeansDecisionReport(caseType == null)
	then
		$decision.setCaseType($case.getCaseType());
		update($decision);
end


rule "set applicant's employment status as employed"
   when
      $case : CrimeCase( meansInformation.applicant.employedIncomeHistory != null &&  meansInformation.applicant.employedIncomeHistory.empty   == false)
      $decision : CrimeMeansDecisionReport( employmentStatus == null  )
      
   then
      $decision.setEmploymentStatus(EmploymentStatus.EMPLOYED);
      update($decision);
end

rule "set applicant's employment status as unemployed"
   when
      $case : CrimeCase( meansInformation.applicant.employedIncomeHistory == null ||  meansInformation.applicant.employedIncomeHistory.empty   == true)
      $decision : CrimeMeansDecisionReport( employmentStatus == null  )
      
   then
      $decision.setEmploymentStatus(EmploymentStatus.UNEMPLOYED);
      update($decision);
end

// frequency for tax and ni could not be same as income frequecy, so model may change, for now it kept same.
rule "calculate applicant's employed income,ni, tax , gross household income"
lock-on-active  true
	when
		$case : CrimeCase( meansInformation.applicant.employedIncomeHistory != null &&  meansInformation.applicant.employedIncomeHistory.empty   == false)
		$decision : CrimeMeansDecisionReport( employmentIncome == null  )
	then
		EmployedIncome employedIncome  = $case.getMeansInformation().getApplicant().getEmployedIncomeHistory().get(0);
		
		int annualMultiplier = employedIncome.getFrequency().getAnnualMultiplier();
		BigDecimal annualPay = employedIncome.getPay().multiply(new BigDecimal(annualMultiplier));
		BigDecimal annualNI = employedIncome.getNationalInsurance().multiply(new BigDecimal(annualMultiplier));
		BigDecimal annualTax = employedIncome.getIncomeTax().multiply(new BigDecimal(annualMultiplier));
	
		$decision.setPayeAndNi(BigDecimal.ZERO.add(annualTax).add(annualNI));
		$decision.setEmploymentIncome(annualPay.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualPay).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add($decision.getPayeAndNi()));
		
	 System.out.println("annualPay " + annualPay);
	 System.out.println("annualTax " + annualTax);
	 System.out.println("annualNI " + annualNI);
	 
		update($decision);
end


rule "calculate partner income, gross household income"
lock-on-active  true
	when
		$case : CrimeCase( meansInformation.partner != null &&  meansInformation.partner.employedIncome   != null)
		$decision : CrimeMeansDecisionReport( partnerEmploymentIncome == null  )
	then
	
		//todo we should consider ni and tax as well like we do for applicant, spreadsheet does not have such case.
		EmployedIncome employedIncome  = $case.getMeansInformation().getPartner().getEmployedIncome();
		int annualMultiplier = employedIncome.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualPay = employedIncome.getPay().multiply(new BigDecimal(annualMultiplier));
		
		$decision.setPartnerEmploymentIncome(annualPay.setScale(2, BigDecimal.ROUND_HALF_EVEN));
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualPay).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
	 	System.out.println("partner annualPay " + annualPay);
		
		update($decision);
end

rule "process applicant's child benefit, gross household income "
lock-on-active true
when		
		$decision : CrimeMeansDecisionReport(  )
		// TODO: check if this line below is a condition to skip then block, if condition is met it will $otherIncomes otherwise then block will be skipped??
		$case : CrimeCase( $otherIncomes :  meansInformation.applicant.otherIncome !=null && meansInformation.applicant.otherIncome.empty == false )	
		$benefit : OtherIncome( incomeType == IncomeType.CHILD_BENEFIT ) from $otherIncomes
	then
	
		int annualMultiplier = $benefit.getFrequency().getAnnualMultiplier();

		BigDecimal annualChildBenefit = $benefit.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		annualChildBenefit = annualChildBenefit.setScale(2, BigDecimal.ROUND_HALF_EVEN);
        System.out.println("annualChildBenefit " + annualChildBenefit);
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualChildBenefit).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
		update($decision);
end

rule "process applicant's state pension, gross household income "
lock-on-active true
when		
		$decision : CrimeMeansDecisionReport(  )
		// TODO: check if this line below is a condition to skip then block, if condition is met it will $otherIncomes otherwise then block will be skipped??
		$case : CrimeCase( $otherIncomes :  meansInformation.applicant.otherIncome !=null && meansInformation.applicant.otherIncome.empty == false )	
		$benefit : OtherIncome( incomeType == IncomeType.STATE_PENSION ) from $otherIncomes
	then
	
		int annualMultiplier = $benefit.getFrequency().getAnnualMultiplier();

		BigDecimal annualStatePension = $benefit.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		annualStatePension = annualStatePension.setScale(2, BigDecimal.ROUND_HALF_EVEN);
        System.out.println("annualStatePension " + annualStatePension);
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualStatePension).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
		update($decision);
end

rule "process applicant's private pension, gross household income "
lock-on-active true
when		
		$decision : CrimeMeansDecisionReport(  )
		// TODO: check if this line below is a condition to skip then block, if condition is met it will $otherIncomes otherwise then block will be skipped??
		$case : CrimeCase( $otherIncomes :  meansInformation.applicant.otherIncome !=null && meansInformation.applicant.otherIncome.empty == false )	
		$benefit : OtherIncome( incomeType == IncomeType.PRIVATE_PENSION ) from $otherIncomes
	then
	
		int annualMultiplier = $benefit.getFrequency().getAnnualMultiplier();

		BigDecimal annualPrivatePension = $benefit.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		annualPrivatePension = annualPrivatePension.setScale(2, BigDecimal.ROUND_HALF_EVEN);
        System.out.println("annualPrivatePension " + annualPrivatePension);
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualPrivatePension).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
		update($decision);
end


rule "process applicant's child tax credit, gross household income "
lock-on-active true
when		
		$decision : CrimeMeansDecisionReport(  )
		// TODO: check if this line below is a condition to skip then block, if condition is met it will $otherIncomes otherwise then block will be skipped??
		$case : CrimeCase( $otherIncomes :  meansInformation.applicant.otherIncome != null && meansInformation.applicant.otherIncome.empty == false )	
		$benefit : OtherIncome( incomeType == IncomeType.CHILD_TAX_CREDIT ) from $otherIncomes
	then
	
		int annualMultiplier = $benefit.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualChildTaxCredit = $benefit.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		annualChildTaxCredit = annualChildTaxCredit.setScale(2, BigDecimal.ROUND_HALF_EVEN);
        System.out.println("annualChildTaxCredit " + annualChildTaxCredit);
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualChildTaxCredit).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
		update($decision);
end

rule "process child care fees and total outgoings" 
lock-on-active 
	when
	
		$case : CrimeCase( $outgoings : meansInformation.outgoings   )	
		$childCareFees : Outgoing( outGoingType == OutgoingType.CHILD_CARE_FEES ) from $outgoings 
		$decision : 	CrimeMeansDecisionReport(  )
		
	then
		int annualMultiplier = $childCareFees.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualChildCareFee = $childCareFees.getAmount().multiply(new BigDecimal(annualMultiplier));
			
		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add(annualChildCareFee));
		System.out.println("annualChildCareFee " + annualChildCareFee);
		
		update($decision);
end

rule "process mortgage or rent and total outgoings"
lock-on-active 
	when
	
		$case : CrimeCase( $outgoings : meansInformation.outgoings   )	
		$mortgage : Outgoing( outGoingType == OutgoingType.MORTGAGE_PAYMENT ) from $outgoings 
		$decision : 	CrimeMeansDecisionReport(  )
		
	then
		int annualMultiplier = $mortgage.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualMortgage = $mortgage.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add(annualMortgage));	
		System.out.println("annualMortgage " + annualMortgage);
		
		update($decision);
end

rule "process (non-employment based) TAX and total outgoings"
lock-on-active 
	when
	
		$case : CrimeCase( $outgoings : meansInformation.outgoings   )	
		$tax : Outgoing( outGoingType == OutgoingType.TAX ) from $outgoings 
		$decision : 	CrimeMeansDecisionReport(  )
		
	then
		int annualMultiplier = $tax.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualTax = $tax.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add(annualTax));	
		System.out.println("annualTax " + annualTax);
		
		update($decision);
end



rule "process council tax  and total outgoings income"
lock-on-active 
	when
	
		$case : CrimeCase( $outgoings : meansInformation.outgoings   )	
		$councilTax : Outgoing( outGoingType == OutgoingType.COUNCIL_TAX ) from $outgoings 
		$decision : 	CrimeMeansDecisionReport(  )
		
	then
		int annualMultiplier = $councilTax.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualCouncilTax = $councilTax.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		$decision.setTotalOutgoings(Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add(annualCouncilTax));	
		System.out.println("annualCouncilTax " + annualCouncilTax);
		
		update($decision);
end


rule "process applicant's other miscellaneous income add to gross household income"
lock-on-active true
when		
		$decision : CrimeMeansDecisionReport(  )
		$case : CrimeCase( $otherIncomes :  meansInformation.applicant.otherIncome != null && meansInformation.applicant.otherIncome.empty == false)	
		$miscOtherIncome : OtherIncome( incomeType == IncomeType.MISCELLANEOUS ) from $otherIncomes
		// TODO: above rule can also meet this condition so do we need to lock??
		
	then
		int annualMultiplier = $miscOtherIncome.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualMiscIncome = $miscOtherIncome.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		annualMiscIncome = annualMiscIncome.setScale(2, BigDecimal.ROUND_HALF_EVEN);
        System.out.println("annualMiscIncome " + annualMiscIncome);
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualMiscIncome).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
		update($decision);
		
end

rule "process applicant's maintenance income add to gross household income"
lock-on-active true
when		
		$decision : CrimeMeansDecisionReport(  )
		$case : CrimeCase( $otherIncomes :  meansInformation.applicant.otherIncome != null && meansInformation.applicant.otherIncome.empty == false)	
		$maintenanceBenefit : OtherIncome( incomeType == IncomeType.MAINTENANCE_INCOME ) from $otherIncomes
		// TODO: above rule can also meet this condition so do we need to lock??
		
	then
		int annualMultiplier = $maintenanceBenefit.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualMaintenance = $maintenanceBenefit.getAmount().multiply(new BigDecimal(annualMultiplier));
		
		annualMaintenance = annualMaintenance.setScale(2, BigDecimal.ROUND_HALF_EVEN);
        System.out.println("annualMaintenance " + annualMaintenance);
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualMaintenance).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
		update($decision);
		
end


rule "process partner's child credit and add to gross household income"
lock-on-active true
when
		$decision : CrimeMeansDecisionReport(  )
	    CrimeCase( meansInformation.partner !=null && meansInformation.partner.otherIncome !=null && meansInformation.partner.otherIncome.empty == false)
		
		$case : CrimeCase( $otherIncomes :  meansInformation.partner.otherIncome )
      	$benefit : OtherIncome( incomeType == IncomeType.CHILD_BENEFIT) from $otherIncomes
	then
		int annualMultiplier = $benefit.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualChildBenefit = $benefit.getAmount().multiply(new BigDecimal(annualMultiplier));

		annualChildBenefit = annualChildBenefit.setScale(2, BigDecimal.ROUND_HALF_EVEN);
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualChildBenefit).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
		update($decision);
end

rule "process partner's state pension benefit and add to gross household income"
lock-on-active true
when
		$decision : CrimeMeansDecisionReport(  )
	    CrimeCase( meansInformation.partner !=null && meansInformation.partner.otherIncome !=null && meansInformation.partner.otherIncome.empty == false)
		
		$case : CrimeCase( $otherIncomes :  meansInformation.partner.otherIncome )
      	$benefit : OtherIncome( incomeType == IncomeType.STATE_PENSION) from $otherIncomes
	then
		int annualMultiplier = $benefit.getFrequency().getAnnualMultiplier();
		
		BigDecimal annualStatePension = $benefit.getAmount().multiply(new BigDecimal(annualMultiplier));

		annualStatePension = annualStatePension.setScale(2, BigDecimal.ROUND_HALF_EVEN);
		$decision.setGrossHouseholdIncome(Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).add(annualStatePension).setScale(2, BigDecimal.ROUND_HALF_EVEN));
		
		update($decision);
end


rule "process weight for partner"
lock-on-active true
when
		$decision : CrimeMeansDecisionReport(  )
		CrimeCase( meansInformation.partner != null)
	then
		$decision.setPartnerWeight(BigDecimal.valueOf( 0.64));
		System.out.println("partner weight  " + $decision.getPartnerWeight());
		update($decision);
end

rule "process weight for children"
lock-on-active true
when
		$decision : CrimeMeansDecisionReport(  )
		$case : CrimeCase($dependents :  meansInformation.dependents !=null,  meansInformation.dependents.empty   == false )
		//CrimeDependent( relationToApplicant == RelationToApplicant.CHILD_OF_APPLICANT ) from $dependents
		// TODO: how to check that dependennts has a CHILD_OF_APPLICANT
then
	MeansInformation meansInformation = $case.getMeansInformation();
            		BigDecimal childrenWeight = meansInformation.
            			getDependents().
            			stream().
            			filter(dependent -> dependent instanceof CrimeDependent).
            			map (dependent -> (CrimeDependent) dependent).
            			filter(dependent -> dependent.getRelationToApplicant() == RelationToApplicant.CHILD_OF_APPLICANT).
            			map(dependent -> Weight.weightValue(dependent.getLowerAgeRange(), dependent.getUpperAgeRange()).multiply(new BigDecimal(dependent.getNumberOfChildren()))).
            			reduce(BigDecimal.ZERO, BigDecimal::add);
            
		System.out.println("children  weight  " + childrenWeight);
		$decision.setChildWeight(childrenWeight);
		update($decision);
end

rule "process total weight"
when
		// there is no separate rule for applicant weight as it is fixed value and always there will be one applicant in one case.
		$decision : CrimeMeansDecisionReport(  )
then
	$decision.setTotalWeight(
							new BigDecimal("1.0").
							add(Optional.ofNullable($decision.getPartnerWeight()).orElse(BigDecimal.ZERO)).
							add(Optional.ofNullable($decision.getChildWeight()).orElse(BigDecimal.ZERO))
							);
											
	System.out.println("total   weight  " + $decision.getTotalWeight());
	System.out.println("gross household income  " + $decision.getGrossHouseholdIncome());
	
	update($decision);
end


rule "process adjusted income"
when
		$decision : CrimeMeansDecisionReport() ;
then

	BigDecimal annualAdjustedIncome =  Optional.ofNullable($decision.getGrossHouseholdIncome()).orElse(BigDecimal.ZERO).
										divide(Optional.ofNullable($decision.getTotalWeight()).orElse(BigDecimal.ONE), RoundingMode.HALF_EVEN);
	System.out.println("annualAdjustedIncome     " + annualAdjustedIncome);
	$decision.setAdjustedIncome(annualAdjustedIncome);
	System.out.println("outgoings " + $decision.getTotalOutgoings());
	
	update($decision);
end

rule "process adjusted annual living allowance "
when
		$decision : CrimeMeansDecisionReport() ;
		// TODO: what happens if this rule runs before total, partner and child weight calculation.
		 
then

	BigDecimal adjustedLivingAllowance = new BigDecimal("5676").multiply($decision.getTotalWeight()).setScale(2, BigDecimal.ROUND_HALF_EVEN);
	$decision.setAdjustedLivingAllowance(adjustedLivingAllowance);
	System.out.println("adjustedLivingAllowance income " + adjustedLivingAllowance);
	
	update($decision);
end

rule "process disposable annual income"
when
		$decision : CrimeMeansDecisionReport( grossHouseholdIncome != null, disposableIncome == null )
		 // TODO: do we need to check for getTotalOutgoings null value and getAdjustedLivingAllowance null value?
then

	BigDecimal add = Optional.ofNullable($decision.getTotalOutgoings()).orElse(BigDecimal.ZERO).add($decision.getAdjustedLivingAllowance());
	BigDecimal disposable = $decision.getGrossHouseholdIncome().subtract(add);
	System.out.println("********************** add is:     " + add);
	$decision.setDisposableIncome(disposable);

	System.out.println("disposable income " + disposable);
	update($decision);
end



